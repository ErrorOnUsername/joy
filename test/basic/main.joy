decl MyStruct = struct {
	member_0: uint;
	member_1: string;
};

decl MyEnum = enum {
	VariantA;
	VariantB;
};

decl MyUnion = union {
	VariantA(a: i32, slice: [mut u32]);
	VariantB(thing: MyStruct, name: string);
};

decl square = fn(n: int) -> int {
	return n * n;
};

decl main = fn() {
	// Line comment.
	let a: string = "haha";
	let mut b = 10;

	/* level 1
		/* level 2
			some stuff
		*/
	*/

	if b == 10 {
		b *= 10;
	} else if b > 10 {
		b = 10;
	} else {
		b -= 1;
	}

	let mut fact = 2;
	/*
	for i in [0..b) {
		fact *= fact;
	}

	while fact > 0 {
		fact -= 1;
	}

	loop { break; }

	let c = square(b);

	let mut d: MyStruct = { 10, "Hello" };
	let e: uint = d.member_0;
	let f: string = d.member_1;

	d.member_0 = 1;

	let g: MyEnum = .VariantB;
	let h: MyUnion = .VariantB { d, "haha" };
	*/
};
